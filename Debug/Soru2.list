
Soru2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001a50  08001a50  00011a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a60  08001a60  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08001a60  08001a60  00011a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001a68  08001a68  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a68  08001a68  00011a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a6c  08001a6c  00011a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08001a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020034  2**0
                  CONTENTS
 10 .bss          000000b0  20000034  20000034  00020034  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000e4  200000e4  00020034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003c92  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000dbe  00000000  00000000  00023cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003d8  00000000  00000000  00024ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000360  00000000  00000000  00024e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ebd2  00000000  00000000  000251f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000043b7  00000000  00000000  00043dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbec6  00000000  00000000  00048179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010403f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000de8  00000000  00000000  00104094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000034 	.word	0x20000034
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001a38 	.word	0x08001a38

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000038 	.word	0x20000038
 80001c4:	08001a38 	.word	0x08001a38

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	db0b      	blt.n	80004ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	f003 021f 	and.w	r2, r3, #31
 80004d8:	4907      	ldr	r1, [pc, #28]	; (80004f8 <__NVIC_EnableIRQ+0x38>)
 80004da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004de:	095b      	lsrs	r3, r3, #5
 80004e0:	2001      	movs	r0, #1
 80004e2:	fa00 f202 	lsl.w	r2, r0, r2
 80004e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	e000e100 	.word	0xe000e100

080004fc <yapi_tanimla>:
}MesajYapisiTypeDef;

MesajYapisiTypeDef a;

MesajYapisiTypeDef yapi_tanimla()
{
 80004fc:	b4b0      	push	{r4, r5, r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	a.baslangic = '£';   //başlama karakteri
 8000504:	4b1d      	ldr	r3, [pc, #116]	; (800057c <yapi_tanimla+0x80>)
 8000506:	22a3      	movs	r2, #163	; 0xa3
 8000508:	701a      	strb	r2, [r3, #0]

	a.gelen_emir_numarasi[0] = 50;  // emir no 1
 800050a:	4b1c      	ldr	r3, [pc, #112]	; (800057c <yapi_tanimla+0x80>)
 800050c:	2232      	movs	r2, #50	; 0x32
 800050e:	805a      	strh	r2, [r3, #2]
	a.gelen_emir_numarasi[1] = 50;  // emir no 2
 8000510:	4b1a      	ldr	r3, [pc, #104]	; (800057c <yapi_tanimla+0x80>)
 8000512:	2232      	movs	r2, #50	; 0x32
 8000514:	809a      	strh	r2, [r3, #4]

	a.emir_muhatabi = 51;           //emir muhatabı
 8000516:	4b19      	ldr	r3, [pc, #100]	; (800057c <yapi_tanimla+0x80>)
 8000518:	2233      	movs	r2, #51	; 0x33
 800051a:	719a      	strb	r2, [r3, #6]

	a.emir_adres[0] = 48;		   //adres 1. indisi
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <yapi_tanimla+0x80>)
 800051e:	2230      	movs	r2, #48	; 0x30
 8000520:	609a      	str	r2, [r3, #8]
	a.emir_adres[1] = 48;		   //adres 2. indisi
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <yapi_tanimla+0x80>)
 8000524:	2230      	movs	r2, #48	; 0x30
 8000526:	60da      	str	r2, [r3, #12]
	a.emir_adres[2] = 49;		   //adres 3. indisi
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <yapi_tanimla+0x80>)
 800052a:	2231      	movs	r2, #49	; 0x31
 800052c:	611a      	str	r2, [r3, #16]
	a.emir_adres[3] = 56;		   //adres 4. indisi
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <yapi_tanimla+0x80>)
 8000530:	2238      	movs	r2, #56	; 0x38
 8000532:	615a      	str	r2, [r3, #20]

	a.emir_turu = 56;			   //8 harici her şey okunacak
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <yapi_tanimla+0x80>)
 8000536:	2238      	movs	r2, #56	; 0x38
 8000538:	761a      	strb	r2, [r3, #24]

	a.data_tipi = 'i';             //data tipi int olacak
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <yapi_tanimla+0x80>)
 800053c:	2269      	movs	r2, #105	; 0x69
 800053e:	765a      	strb	r2, [r3, #25]

	a.data_alani[0] = 0;		   //Verinin 1. değeri
 8000540:	4b0e      	ldr	r3, [pc, #56]	; (800057c <yapi_tanimla+0x80>)
 8000542:	2200      	movs	r2, #0
 8000544:	769a      	strb	r2, [r3, #26]
	a.data_alani[1] = 0;		   //Verinin 2. değeri
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <yapi_tanimla+0x80>)
 8000548:	2200      	movs	r2, #0
 800054a:	76da      	strb	r2, [r3, #27]
	a.data_alani[2] = 0;		   //Verinin 3. değeri
 800054c:	4b0b      	ldr	r3, [pc, #44]	; (800057c <yapi_tanimla+0x80>)
 800054e:	2200      	movs	r2, #0
 8000550:	771a      	strb	r2, [r3, #28]
	a.data_alani[3] = 0;		   //Verinin 4. değeri
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <yapi_tanimla+0x80>)
 8000554:	2200      	movs	r2, #0
 8000556:	775a      	strb	r2, [r3, #29]

	a.bitis = '%';     //bitiş karakteri
 8000558:	4b08      	ldr	r3, [pc, #32]	; (800057c <yapi_tanimla+0x80>)
 800055a:	2225      	movs	r2, #37	; 0x25
 800055c:	83da      	strh	r2, [r3, #30]

 return a;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a06      	ldr	r2, [pc, #24]	; (800057c <yapi_tanimla+0x80>)
 8000562:	461c      	mov	r4, r3
 8000564:	4615      	mov	r5, r2
 8000566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800056e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	bcb0      	pop	{r4, r5, r7}
 800057a:	4770      	bx	lr
 800057c:	200000c0 	.word	0x200000c0

08000580 <GPIO_Config>:

MesajYapisiTypeDef yapi; //istenilen yapıyı tutacak yapı
MesajYapisiTypeDef gelen_mesaj_yapisi;  //gelen mesajın yapısını tutacak yapı

void GPIO_Config()
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
	//PinD8 -> USART3_TX  &  PinD9 -> USART3_RX    AF7
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; //D portu clock hattı aktifedildi.
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <GPIO_Config+0x40>)
 8000586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <GPIO_Config+0x40>)
 800058a:	f043 0308 	orr.w	r3, r3, #8
 800058e:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOD->MODER |= GPIO_MODER_MODE8_1 | GPIO_MODER_MODE9_1; //Pin8-9 Af olarak kullanılacak.
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <GPIO_Config+0x44>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <GPIO_Config+0x44>)
 8000596:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800059a:	6013      	str	r3, [r2, #0]
	GPIOD->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8 | GPIO_OSPEEDER_OSPEEDR9; //Hız max.
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <GPIO_Config+0x44>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <GPIO_Config+0x44>)
 80005a2:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 80005a6:	6093      	str	r3, [r2, #8]
	GPIOD->AFR[1] |= (1<<0) | (1<<1) | (1<<2) | (1<<4) | (1<<5) | (1<<6); //Hangi af olduğunu belirttik.(AF7)
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <GPIO_Config+0x44>)
 80005aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ac:	4a05      	ldr	r2, [pc, #20]	; (80005c4 <GPIO_Config+0x44>)
 80005ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80005b2:	6253      	str	r3, [r2, #36]	; 0x24
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40020c00 	.word	0x40020c00

080005c8 <USART_Config>:

void USART_Config()
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN; //USART3 clock hattı aktif edildi.
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <USART_Config+0x54>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a12      	ldr	r2, [pc, #72]	; (800061c <USART_Config+0x54>)
 80005d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40

	NVIC_EnableIRQ(USART3_IRQn); // USART3 için oluşan kesmelere izin verildi.
 80005d8:	2027      	movs	r0, #39	; 0x27
 80005da:	f7ff ff71 	bl	80004c0 <__NVIC_EnableIRQ>

	USART3->BRR = 0X1114; //BaudRate hızı: 9600 olarak ayarlandı.
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <USART_Config+0x58>)
 80005e0:	f241 1214 	movw	r2, #4372	; 0x1114
 80005e4:	609a      	str	r2, [r3, #8]

	USART3->CR1 |= USART_CR1_RXNEIE; //Okuma tamponu dolu kesmesi aktif edildi.
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <USART_Config+0x58>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <USART_Config+0x58>)
 80005ec:	f043 0320 	orr.w	r3, r3, #32
 80005f0:	60d3      	str	r3, [r2, #12]

	USART3->CR1 |= USART_CR1_TE; //USART3'ün veri gönderim işlevi açık.
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <USART_Config+0x58>)
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <USART_Config+0x58>)
 80005f8:	f043 0308 	orr.w	r3, r3, #8
 80005fc:	60d3      	str	r3, [r2, #12]
	USART3->CR1 |= USART_CR1_RE; //USART3'ün veri alma işlevi açık.
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <USART_Config+0x58>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	4a07      	ldr	r2, [pc, #28]	; (8000620 <USART_Config+0x58>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	60d3      	str	r3, [r2, #12]

	USART3->CR1 |= USART_CR1_UE; //USART3 çevresel birimi aktif edildi.
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <USART_Config+0x58>)
 800060c:	68db      	ldr	r3, [r3, #12]
 800060e:	4a04      	ldr	r2, [pc, #16]	; (8000620 <USART_Config+0x58>)
 8000610:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000614:	60d3      	str	r3, [r2, #12]
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	40004800 	.word	0x40004800

08000624 <TIMER_Config>:


void TIMER_Config()
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; //Timer1'in clock hattı aktif edildi.
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <TIMER_Config+0x5c>)
 800062a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062c:	4a14      	ldr	r2, [pc, #80]	; (8000680 <TIMER_Config+0x5c>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6453      	str	r3, [r2, #68]	; 0x44

	TIM1->CR1 |= TIM_CR1_ARPE; //Sayım değeri değişimi sayım tamamlandığında  etkilenecek.
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <TIMER_Config+0x60>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a12      	ldr	r2, [pc, #72]	; (8000684 <TIMER_Config+0x60>)
 800063a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063e:	6013      	str	r3, [r2, #0]
	TIM1->CR1 &= ~TIM_CR1_CMS;  //Sayım yönü  DIR bitinde belirlenecek.
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <TIMER_Config+0x60>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <TIMER_Config+0x60>)
 8000646:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800064a:	6013      	str	r3, [r2, #0]
	TIM1->CR1 &= ~TIM_CR1_DIR;  //Sayım yukarı yönlü olacak şekilde ayarlandı.
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <TIMER_Config+0x60>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a0c      	ldr	r2, [pc, #48]	; (8000684 <TIMER_Config+0x60>)
 8000652:	f023 0310 	bic.w	r3, r3, #16
 8000656:	6013      	str	r3, [r2, #0]

	TIM1->ARR = 9999;		    //Başlangıçta 10000 adet sayım olacak.(Period degeri)
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <TIMER_Config+0x60>)
 800065a:	f242 720f 	movw	r2, #9999	; 0x270f
 800065e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->PSC = 41999;          //Bölme oranı. Sayım  2.5 saniye sürecek.
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <TIMER_Config+0x60>)
 8000662:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000666:	629a      	str	r2, [r3, #40]	; 0x28

	TIM1->CR1 |= TIM_CR1_CEN; //Sayım başlatıldı.
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <TIMER_Config+0x60>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a05      	ldr	r2, [pc, #20]	; (8000684 <TIMER_Config+0x60>)
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	6013      	str	r3, [r2, #0]
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40010000 	.word	0x40010000

08000688 <mesaj_gonder>:

void mesaj_gonder( volatile char yollanacak_karakter)  //Aldığı karakteri DR registerina yazarak çıkış veren fonksiyon.
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
	while(!(USART3->SR & USART_SR_TXE)); //Bit veri gönderimine hazır mı kontrol ediliyor.
 8000692:	bf00      	nop
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <mesaj_gonder+0x38>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069c:	2b00      	cmp	r3, #0
 800069e:	d0f9      	beq.n	8000694 <mesaj_gonder+0xc>

		USART3->DR = yollanacak_karakter;
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <mesaj_gonder+0x38>)
 80006a6:	605a      	str	r2, [r3, #4]
		USART3->SR &= USART_SR_TXE; //Bit sıfırlanıyor.Yeni gönderime hazır.
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <mesaj_gonder+0x38>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <mesaj_gonder+0x38>)
 80006ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b2:	6013      	str	r3, [r2, #0]
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	40004800 	.word	0x40004800

080006c4 <yollanacak_mesaj>:

void yollanacak_mesaj(volatile unsigned char* adres)  //her karakteri dizinin ilgili adresinden 'mesaj yolla' fonksiyonuna gönderiyoruz.
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	while(*adres)
 80006cc:	e008      	b.n	80006e0 <yollanacak_mesaj+0x1c>
	{
		mesaj_gonder(*adres);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ffd7 	bl	8000688 <mesaj_gonder>
		adres++;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3301      	adds	r3, #1
 80006de:	607b      	str	r3, [r7, #4]
	while(*adres)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d1f1      	bne.n	80006ce <yollanacak_mesaj+0xa>
	}
}
 80006ea:	bf00      	nop
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	if(USART3->SR & USART_SR_RXNE)		//Okuma tamponunun boşluğu kontrol ediliyor.
 80006f8:	4b96      	ldr	r3, [pc, #600]	; (8000954 <USART3_IRQHandler+0x260>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f003 0320 	and.w	r3, r3, #32
 8000700:	2b00      	cmp	r3, #0
 8000702:	f000 824f 	beq.w	8000ba4 <USART3_IRQHandler+0x4b0>
	{
		USART3->SR &= ~USART_SR_RXNE;
 8000706:	4b93      	ldr	r3, [pc, #588]	; (8000954 <USART3_IRQHandler+0x260>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a92      	ldr	r2, [pc, #584]	; (8000954 <USART3_IRQHandler+0x260>)
 800070c:	f023 0320 	bic.w	r3, r3, #32
 8000710:	6013      	str	r3, [r2, #0]

		if(USART3->DR != '\r')
 8000712:	4b90      	ldr	r3, [pc, #576]	; (8000954 <USART3_IRQHandler+0x260>)
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	2b0d      	cmp	r3, #13
 8000718:	f000 817e 	beq.w	8000a18 <USART3_IRQHandler+0x324>
		{
			gelen_karakter = USART3->DR;  //Gelen karakter alınıyor.
 800071c:	4b8d      	ldr	r3, [pc, #564]	; (8000954 <USART3_IRQHandler+0x260>)
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b8d      	ldr	r3, [pc, #564]	; (8000958 <USART3_IRQHandler+0x264>)
 8000724:	701a      	strb	r2, [r3, #0]

			switch(gelen_veri_adeti)  //Aşağıda mesaj yapıları sıra ile alınarak karşılaştırılıyor.
 8000726:	4b8d      	ldr	r3, [pc, #564]	; (800095c <USART3_IRQHandler+0x268>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2b0e      	cmp	r3, #14
 800072c:	f200 816e 	bhi.w	8000a0c <USART3_IRQHandler+0x318>
 8000730:	a201      	add	r2, pc, #4	; (adr r2, 8000738 <USART3_IRQHandler+0x44>)
 8000732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000736:	bf00      	nop
 8000738:	08000775 	.word	0x08000775
 800073c:	080007a5 	.word	0x080007a5
 8000740:	080007d7 	.word	0x080007d7
 8000744:	08000809 	.word	0x08000809
 8000748:	08000839 	.word	0x08000839
 800074c:	0800086b 	.word	0x0800086b
 8000750:	0800089d 	.word	0x0800089d
 8000754:	080008cf 	.word	0x080008cf
 8000758:	08000901 	.word	0x08000901
 800075c:	08000931 	.word	0x08000931
 8000760:	08000983 	.word	0x08000983
 8000764:	08000999 	.word	0x08000999
 8000768:	080009af 	.word	0x080009af
 800076c:	080009c5 	.word	0x080009c5
 8000770:	080009db 	.word	0x080009db
			{
				case 0:
					gelen_mesaj_yapisi.baslangic = gelen_karakter;
 8000774:	4b78      	ldr	r3, [pc, #480]	; (8000958 <USART3_IRQHandler+0x264>)
 8000776:	781a      	ldrb	r2, [r3, #0]
 8000778:	4b79      	ldr	r3, [pc, #484]	; (8000960 <USART3_IRQHandler+0x26c>)
 800077a:	701a      	strb	r2, [r3, #0]
					if(gelen_mesaj_yapisi.baslangic == yapi.baslangic)
 800077c:	4b78      	ldr	r3, [pc, #480]	; (8000960 <USART3_IRQHandler+0x26c>)
 800077e:	781a      	ldrb	r2, [r3, #0]
 8000780:	4b78      	ldr	r3, [pc, #480]	; (8000964 <USART3_IRQHandler+0x270>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	429a      	cmp	r2, r3
 8000786:	d106      	bne.n	8000796 <USART3_IRQHandler+0xa2>
					{
						gelen_mesaj[gelen_veri_adeti] = gelen_karakter;
 8000788:	4b74      	ldr	r3, [pc, #464]	; (800095c <USART3_IRQHandler+0x268>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a72      	ldr	r2, [pc, #456]	; (8000958 <USART3_IRQHandler+0x264>)
 800078e:	7811      	ldrb	r1, [r2, #0]
 8000790:	4a75      	ldr	r2, [pc, #468]	; (8000968 <USART3_IRQHandler+0x274>)
 8000792:	54d1      	strb	r1, [r2, r3]
					else
					{
					olumsuz_durum++;
					}

					break;
 8000794:	e13a      	b.n	8000a0c <USART3_IRQHandler+0x318>
					olumsuz_durum++;
 8000796:	4b75      	ldr	r3, [pc, #468]	; (800096c <USART3_IRQHandler+0x278>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	3301      	adds	r3, #1
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b73      	ldr	r3, [pc, #460]	; (800096c <USART3_IRQHandler+0x278>)
 80007a0:	701a      	strb	r2, [r3, #0]
					break;
 80007a2:	e133      	b.n	8000a0c <USART3_IRQHandler+0x318>
				case 1:
					gelen_mesaj_yapisi.gelen_emir_numarasi[0] = gelen_karakter;
 80007a4:	4b6c      	ldr	r3, [pc, #432]	; (8000958 <USART3_IRQHandler+0x264>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	4b6d      	ldr	r3, [pc, #436]	; (8000960 <USART3_IRQHandler+0x26c>)
 80007ac:	805a      	strh	r2, [r3, #2]

					if(gelen_mesaj_yapisi.gelen_emir_numarasi[0] == yapi.gelen_emir_numarasi[0])
 80007ae:	4b6c      	ldr	r3, [pc, #432]	; (8000960 <USART3_IRQHandler+0x26c>)
 80007b0:	885a      	ldrh	r2, [r3, #2]
 80007b2:	4b6c      	ldr	r3, [pc, #432]	; (8000964 <USART3_IRQHandler+0x270>)
 80007b4:	885b      	ldrh	r3, [r3, #2]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d106      	bne.n	80007c8 <USART3_IRQHandler+0xd4>
					{
						gelen_mesaj[gelen_veri_adeti] = gelen_karakter;
 80007ba:	4b68      	ldr	r3, [pc, #416]	; (800095c <USART3_IRQHandler+0x268>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a66      	ldr	r2, [pc, #408]	; (8000958 <USART3_IRQHandler+0x264>)
 80007c0:	7811      	ldrb	r1, [r2, #0]
 80007c2:	4a69      	ldr	r2, [pc, #420]	; (8000968 <USART3_IRQHandler+0x274>)
 80007c4:	54d1      	strb	r1, [r2, r3]
					else
					{
						olumsuz_durum++;
					}

					break;
 80007c6:	e121      	b.n	8000a0c <USART3_IRQHandler+0x318>
						olumsuz_durum++;
 80007c8:	4b68      	ldr	r3, [pc, #416]	; (800096c <USART3_IRQHandler+0x278>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	4b66      	ldr	r3, [pc, #408]	; (800096c <USART3_IRQHandler+0x278>)
 80007d2:	701a      	strb	r2, [r3, #0]
					break;
 80007d4:	e11a      	b.n	8000a0c <USART3_IRQHandler+0x318>
				case 2:
					gelen_mesaj_yapisi.gelen_emir_numarasi[1] = gelen_karakter;
 80007d6:	4b60      	ldr	r3, [pc, #384]	; (8000958 <USART3_IRQHandler+0x264>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b29a      	uxth	r2, r3
 80007dc:	4b60      	ldr	r3, [pc, #384]	; (8000960 <USART3_IRQHandler+0x26c>)
 80007de:	809a      	strh	r2, [r3, #4]

					if(gelen_mesaj_yapisi.gelen_emir_numarasi[1] == yapi.gelen_emir_numarasi[1])
 80007e0:	4b5f      	ldr	r3, [pc, #380]	; (8000960 <USART3_IRQHandler+0x26c>)
 80007e2:	889a      	ldrh	r2, [r3, #4]
 80007e4:	4b5f      	ldr	r3, [pc, #380]	; (8000964 <USART3_IRQHandler+0x270>)
 80007e6:	889b      	ldrh	r3, [r3, #4]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d106      	bne.n	80007fa <USART3_IRQHandler+0x106>
					{
						gelen_mesaj[gelen_veri_adeti] = gelen_karakter;
 80007ec:	4b5b      	ldr	r3, [pc, #364]	; (800095c <USART3_IRQHandler+0x268>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a59      	ldr	r2, [pc, #356]	; (8000958 <USART3_IRQHandler+0x264>)
 80007f2:	7811      	ldrb	r1, [r2, #0]
 80007f4:	4a5c      	ldr	r2, [pc, #368]	; (8000968 <USART3_IRQHandler+0x274>)
 80007f6:	54d1      	strb	r1, [r2, r3]
					else
					{
						olumsuz_durum++;
					}

					break;
 80007f8:	e108      	b.n	8000a0c <USART3_IRQHandler+0x318>
						olumsuz_durum++;
 80007fa:	4b5c      	ldr	r3, [pc, #368]	; (800096c <USART3_IRQHandler+0x278>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	3301      	adds	r3, #1
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b5a      	ldr	r3, [pc, #360]	; (800096c <USART3_IRQHandler+0x278>)
 8000804:	701a      	strb	r2, [r3, #0]
					break;
 8000806:	e101      	b.n	8000a0c <USART3_IRQHandler+0x318>
				case 3:
					gelen_mesaj_yapisi.emir_muhatabi = gelen_karakter;
 8000808:	4b53      	ldr	r3, [pc, #332]	; (8000958 <USART3_IRQHandler+0x264>)
 800080a:	781a      	ldrb	r2, [r3, #0]
 800080c:	4b54      	ldr	r3, [pc, #336]	; (8000960 <USART3_IRQHandler+0x26c>)
 800080e:	719a      	strb	r2, [r3, #6]

					if(gelen_mesaj_yapisi.emir_muhatabi == yapi.emir_muhatabi)
 8000810:	4b53      	ldr	r3, [pc, #332]	; (8000960 <USART3_IRQHandler+0x26c>)
 8000812:	799a      	ldrb	r2, [r3, #6]
 8000814:	4b53      	ldr	r3, [pc, #332]	; (8000964 <USART3_IRQHandler+0x270>)
 8000816:	799b      	ldrb	r3, [r3, #6]
 8000818:	429a      	cmp	r2, r3
 800081a:	d106      	bne.n	800082a <USART3_IRQHandler+0x136>
					{
						gelen_mesaj[gelen_veri_adeti] = gelen_karakter;
 800081c:	4b4f      	ldr	r3, [pc, #316]	; (800095c <USART3_IRQHandler+0x268>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a4d      	ldr	r2, [pc, #308]	; (8000958 <USART3_IRQHandler+0x264>)
 8000822:	7811      	ldrb	r1, [r2, #0]
 8000824:	4a50      	ldr	r2, [pc, #320]	; (8000968 <USART3_IRQHandler+0x274>)
 8000826:	54d1      	strb	r1, [r2, r3]
					{
						olumsuz_durum++;

					}

					break;
 8000828:	e0f0      	b.n	8000a0c <USART3_IRQHandler+0x318>
						olumsuz_durum++;
 800082a:	4b50      	ldr	r3, [pc, #320]	; (800096c <USART3_IRQHandler+0x278>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	3301      	adds	r3, #1
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b4e      	ldr	r3, [pc, #312]	; (800096c <USART3_IRQHandler+0x278>)
 8000834:	701a      	strb	r2, [r3, #0]
					break;
 8000836:	e0e9      	b.n	8000a0c <USART3_IRQHandler+0x318>

				case 4:
					gelen_mesaj_yapisi.emir_adres[0] = gelen_karakter;
 8000838:	4b47      	ldr	r3, [pc, #284]	; (8000958 <USART3_IRQHandler+0x264>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	4b48      	ldr	r3, [pc, #288]	; (8000960 <USART3_IRQHandler+0x26c>)
 8000840:	609a      	str	r2, [r3, #8]

					if(gelen_mesaj_yapisi.emir_adres[0] == yapi.emir_adres[0])
 8000842:	4b47      	ldr	r3, [pc, #284]	; (8000960 <USART3_IRQHandler+0x26c>)
 8000844:	689a      	ldr	r2, [r3, #8]
 8000846:	4b47      	ldr	r3, [pc, #284]	; (8000964 <USART3_IRQHandler+0x270>)
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	429a      	cmp	r2, r3
 800084c:	d106      	bne.n	800085c <USART3_IRQHandler+0x168>
					{
						gelen_mesaj[gelen_veri_adeti] = gelen_karakter;
 800084e:	4b43      	ldr	r3, [pc, #268]	; (800095c <USART3_IRQHandler+0x268>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a41      	ldr	r2, [pc, #260]	; (8000958 <USART3_IRQHandler+0x264>)
 8000854:	7811      	ldrb	r1, [r2, #0]
 8000856:	4a44      	ldr	r2, [pc, #272]	; (8000968 <USART3_IRQHandler+0x274>)
 8000858:	54d1      	strb	r1, [r2, r3]
					else
					{
						olumsuz_durum++;
					}

					break;
 800085a:	e0d7      	b.n	8000a0c <USART3_IRQHandler+0x318>
						olumsuz_durum++;
 800085c:	4b43      	ldr	r3, [pc, #268]	; (800096c <USART3_IRQHandler+0x278>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b41      	ldr	r3, [pc, #260]	; (800096c <USART3_IRQHandler+0x278>)
 8000866:	701a      	strb	r2, [r3, #0]
					break;
 8000868:	e0d0      	b.n	8000a0c <USART3_IRQHandler+0x318>

				case 5:
					gelen_mesaj_yapisi.emir_adres[1] = gelen_karakter;
 800086a:	4b3b      	ldr	r3, [pc, #236]	; (8000958 <USART3_IRQHandler+0x264>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	4b3b      	ldr	r3, [pc, #236]	; (8000960 <USART3_IRQHandler+0x26c>)
 8000872:	60da      	str	r2, [r3, #12]

					if(gelen_mesaj_yapisi.emir_adres[1] == yapi.emir_adres[1])
 8000874:	4b3a      	ldr	r3, [pc, #232]	; (8000960 <USART3_IRQHandler+0x26c>)
 8000876:	68da      	ldr	r2, [r3, #12]
 8000878:	4b3a      	ldr	r3, [pc, #232]	; (8000964 <USART3_IRQHandler+0x270>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	429a      	cmp	r2, r3
 800087e:	d106      	bne.n	800088e <USART3_IRQHandler+0x19a>
					{
						gelen_mesaj[gelen_veri_adeti] = gelen_karakter;
 8000880:	4b36      	ldr	r3, [pc, #216]	; (800095c <USART3_IRQHandler+0x268>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a34      	ldr	r2, [pc, #208]	; (8000958 <USART3_IRQHandler+0x264>)
 8000886:	7811      	ldrb	r1, [r2, #0]
 8000888:	4a37      	ldr	r2, [pc, #220]	; (8000968 <USART3_IRQHandler+0x274>)
 800088a:	54d1      	strb	r1, [r2, r3]
					}
					else
					{
						olumsuz_durum++;
					}
					break;
 800088c:	e0be      	b.n	8000a0c <USART3_IRQHandler+0x318>
						olumsuz_durum++;
 800088e:	4b37      	ldr	r3, [pc, #220]	; (800096c <USART3_IRQHandler+0x278>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	3301      	adds	r3, #1
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b35      	ldr	r3, [pc, #212]	; (800096c <USART3_IRQHandler+0x278>)
 8000898:	701a      	strb	r2, [r3, #0]
					break;
 800089a:	e0b7      	b.n	8000a0c <USART3_IRQHandler+0x318>

				case 6:
					gelen_mesaj_yapisi.emir_adres[2] = gelen_karakter;
 800089c:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <USART3_IRQHandler+0x264>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b2f      	ldr	r3, [pc, #188]	; (8000960 <USART3_IRQHandler+0x26c>)
 80008a4:	611a      	str	r2, [r3, #16]

					if(gelen_mesaj_yapisi.emir_adres[2] == yapi.emir_adres[2])
 80008a6:	4b2e      	ldr	r3, [pc, #184]	; (8000960 <USART3_IRQHandler+0x26c>)
 80008a8:	691a      	ldr	r2, [r3, #16]
 80008aa:	4b2e      	ldr	r3, [pc, #184]	; (8000964 <USART3_IRQHandler+0x270>)
 80008ac:	691b      	ldr	r3, [r3, #16]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d106      	bne.n	80008c0 <USART3_IRQHandler+0x1cc>
					{
						gelen_mesaj[gelen_veri_adeti] = gelen_karakter;
 80008b2:	4b2a      	ldr	r3, [pc, #168]	; (800095c <USART3_IRQHandler+0x268>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a28      	ldr	r2, [pc, #160]	; (8000958 <USART3_IRQHandler+0x264>)
 80008b8:	7811      	ldrb	r1, [r2, #0]
 80008ba:	4a2b      	ldr	r2, [pc, #172]	; (8000968 <USART3_IRQHandler+0x274>)
 80008bc:	54d1      	strb	r1, [r2, r3]
					else
					{
						olumsuz_durum++;
					}

					break;
 80008be:	e0a5      	b.n	8000a0c <USART3_IRQHandler+0x318>
						olumsuz_durum++;
 80008c0:	4b2a      	ldr	r3, [pc, #168]	; (800096c <USART3_IRQHandler+0x278>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	3301      	adds	r3, #1
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	4b28      	ldr	r3, [pc, #160]	; (800096c <USART3_IRQHandler+0x278>)
 80008ca:	701a      	strb	r2, [r3, #0]
					break;
 80008cc:	e09e      	b.n	8000a0c <USART3_IRQHandler+0x318>
				case 7:
					gelen_mesaj_yapisi.emir_adres[3] = gelen_karakter;
 80008ce:	4b22      	ldr	r3, [pc, #136]	; (8000958 <USART3_IRQHandler+0x264>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b22      	ldr	r3, [pc, #136]	; (8000960 <USART3_IRQHandler+0x26c>)
 80008d6:	615a      	str	r2, [r3, #20]

					if(gelen_mesaj_yapisi.emir_adres[3] == yapi.emir_adres[3])
 80008d8:	4b21      	ldr	r3, [pc, #132]	; (8000960 <USART3_IRQHandler+0x26c>)
 80008da:	695a      	ldr	r2, [r3, #20]
 80008dc:	4b21      	ldr	r3, [pc, #132]	; (8000964 <USART3_IRQHandler+0x270>)
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d106      	bne.n	80008f2 <USART3_IRQHandler+0x1fe>
					{
						gelen_mesaj[gelen_veri_adeti] = gelen_karakter;
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <USART3_IRQHandler+0x268>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a1b      	ldr	r2, [pc, #108]	; (8000958 <USART3_IRQHandler+0x264>)
 80008ea:	7811      	ldrb	r1, [r2, #0]
 80008ec:	4a1e      	ldr	r2, [pc, #120]	; (8000968 <USART3_IRQHandler+0x274>)
 80008ee:	54d1      	strb	r1, [r2, r3]
					else
					{
						olumsuz_durum++;
					}

					break;
 80008f0:	e08c      	b.n	8000a0c <USART3_IRQHandler+0x318>
						olumsuz_durum++;
 80008f2:	4b1e      	ldr	r3, [pc, #120]	; (800096c <USART3_IRQHandler+0x278>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	3301      	adds	r3, #1
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b1c      	ldr	r3, [pc, #112]	; (800096c <USART3_IRQHandler+0x278>)
 80008fc:	701a      	strb	r2, [r3, #0]
					break;
 80008fe:	e085      	b.n	8000a0c <USART3_IRQHandler+0x318>
				case 8:

					gelen_mesaj[gelen_veri_adeti] = gelen_karakter;
 8000900:	4b16      	ldr	r3, [pc, #88]	; (800095c <USART3_IRQHandler+0x268>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a14      	ldr	r2, [pc, #80]	; (8000958 <USART3_IRQHandler+0x264>)
 8000906:	7811      	ldrb	r1, [r2, #0]
 8000908:	4a17      	ldr	r2, [pc, #92]	; (8000968 <USART3_IRQHandler+0x274>)
 800090a:	54d1      	strb	r1, [r2, r3]
					gelen_mesaj_yapisi.emir_turu = gelen_karakter;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <USART3_IRQHandler+0x264>)
 800090e:	781a      	ldrb	r2, [r3, #0]
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <USART3_IRQHandler+0x26c>)
 8000912:	761a      	strb	r2, [r3, #24]

					if(gelen_mesaj_yapisi.emir_turu == yapi.emir_turu)
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <USART3_IRQHandler+0x26c>)
 8000916:	7e1a      	ldrb	r2, [r3, #24]
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <USART3_IRQHandler+0x270>)
 800091a:	7e1b      	ldrb	r3, [r3, #24]
 800091c:	429a      	cmp	r2, r3
 800091e:	d103      	bne.n	8000928 <USART3_IRQHandler+0x234>
					{
						okuma_yazma = 1; // Okunacak.Değer Timer1 ARR register'ına  yazılacak
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <USART3_IRQHandler+0x27c>)
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]
					else
					{
						okuma_yazma = 0; //Yazılacak.Sayım kaçta ise  deger gönderilecek.
					}

					break;
 8000926:	e071      	b.n	8000a0c <USART3_IRQHandler+0x318>
						okuma_yazma = 0; //Yazılacak.Sayım kaçta ise  deger gönderilecek.
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <USART3_IRQHandler+0x27c>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
					break;
 800092e:	e06d      	b.n	8000a0c <USART3_IRQHandler+0x318>

				case 9:
					gelen_mesaj_yapisi.data_tipi = gelen_karakter;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <USART3_IRQHandler+0x264>)
 8000932:	781a      	ldrb	r2, [r3, #0]
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <USART3_IRQHandler+0x26c>)
 8000936:	765a      	strb	r2, [r3, #25]

					if(gelen_mesaj_yapisi.data_tipi == yapi.data_tipi)
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <USART3_IRQHandler+0x26c>)
 800093a:	7e5a      	ldrb	r2, [r3, #25]
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <USART3_IRQHandler+0x270>)
 800093e:	7e5b      	ldrb	r3, [r3, #25]
 8000940:	429a      	cmp	r2, r3
 8000942:	d117      	bne.n	8000974 <USART3_IRQHandler+0x280>
					{
						gelen_mesaj[gelen_veri_adeti] = gelen_karakter;
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <USART3_IRQHandler+0x268>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a03      	ldr	r2, [pc, #12]	; (8000958 <USART3_IRQHandler+0x264>)
 800094a:	7811      	ldrb	r1, [r2, #0]
 800094c:	4a06      	ldr	r2, [pc, #24]	; (8000968 <USART3_IRQHandler+0x274>)
 800094e:	54d1      	strb	r1, [r2, r3]
					}
					else
					{
						olumsuz_durum++;
					}
					break;
 8000950:	e05c      	b.n	8000a0c <USART3_IRQHandler+0x318>
 8000952:	bf00      	nop
 8000954:	40004800 	.word	0x40004800
 8000958:	2000007e 	.word	0x2000007e
 800095c:	20000060 	.word	0x20000060
 8000960:	200000a0 	.word	0x200000a0
 8000964:	20000080 	.word	0x20000080
 8000968:	20000050 	.word	0x20000050
 800096c:	2000007d 	.word	0x2000007d
 8000970:	2000007c 	.word	0x2000007c
						olumsuz_durum++;
 8000974:	4b8c      	ldr	r3, [pc, #560]	; (8000ba8 <USART3_IRQHandler+0x4b4>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b8a      	ldr	r3, [pc, #552]	; (8000ba8 <USART3_IRQHandler+0x4b4>)
 800097e:	701a      	strb	r2, [r3, #0]
					break;
 8000980:	e044      	b.n	8000a0c <USART3_IRQHandler+0x318>
				case 10:
					gelen_mesaj_yapisi.data_alani[0] = gelen_karakter;
 8000982:	4b8a      	ldr	r3, [pc, #552]	; (8000bac <USART3_IRQHandler+0x4b8>)
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	4b8a      	ldr	r3, [pc, #552]	; (8000bb0 <USART3_IRQHandler+0x4bc>)
 8000988:	769a      	strb	r2, [r3, #26]

					gelen_mesaj[gelen_veri_adeti] = gelen_karakter;
 800098a:	4b8a      	ldr	r3, [pc, #552]	; (8000bb4 <USART3_IRQHandler+0x4c0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a87      	ldr	r2, [pc, #540]	; (8000bac <USART3_IRQHandler+0x4b8>)
 8000990:	7811      	ldrb	r1, [r2, #0]
 8000992:	4a89      	ldr	r2, [pc, #548]	; (8000bb8 <USART3_IRQHandler+0x4c4>)
 8000994:	54d1      	strb	r1, [r2, r3]

					break;
 8000996:	e039      	b.n	8000a0c <USART3_IRQHandler+0x318>
				case 11:
					gelen_mesaj_yapisi.data_alani[1] = gelen_karakter;
 8000998:	4b84      	ldr	r3, [pc, #528]	; (8000bac <USART3_IRQHandler+0x4b8>)
 800099a:	781a      	ldrb	r2, [r3, #0]
 800099c:	4b84      	ldr	r3, [pc, #528]	; (8000bb0 <USART3_IRQHandler+0x4bc>)
 800099e:	76da      	strb	r2, [r3, #27]
					gelen_mesaj[gelen_veri_adeti] = gelen_karakter;
 80009a0:	4b84      	ldr	r3, [pc, #528]	; (8000bb4 <USART3_IRQHandler+0x4c0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a81      	ldr	r2, [pc, #516]	; (8000bac <USART3_IRQHandler+0x4b8>)
 80009a6:	7811      	ldrb	r1, [r2, #0]
 80009a8:	4a83      	ldr	r2, [pc, #524]	; (8000bb8 <USART3_IRQHandler+0x4c4>)
 80009aa:	54d1      	strb	r1, [r2, r3]

					break;
 80009ac:	e02e      	b.n	8000a0c <USART3_IRQHandler+0x318>
				case 12:
					gelen_mesaj_yapisi.data_alani[2] = gelen_karakter;
 80009ae:	4b7f      	ldr	r3, [pc, #508]	; (8000bac <USART3_IRQHandler+0x4b8>)
 80009b0:	781a      	ldrb	r2, [r3, #0]
 80009b2:	4b7f      	ldr	r3, [pc, #508]	; (8000bb0 <USART3_IRQHandler+0x4bc>)
 80009b4:	771a      	strb	r2, [r3, #28]
					gelen_mesaj[gelen_veri_adeti] = gelen_karakter;
 80009b6:	4b7f      	ldr	r3, [pc, #508]	; (8000bb4 <USART3_IRQHandler+0x4c0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a7c      	ldr	r2, [pc, #496]	; (8000bac <USART3_IRQHandler+0x4b8>)
 80009bc:	7811      	ldrb	r1, [r2, #0]
 80009be:	4a7e      	ldr	r2, [pc, #504]	; (8000bb8 <USART3_IRQHandler+0x4c4>)
 80009c0:	54d1      	strb	r1, [r2, r3]

					break;
 80009c2:	e023      	b.n	8000a0c <USART3_IRQHandler+0x318>
				case 13:
					gelen_mesaj_yapisi.data_alani[3] = gelen_karakter;
 80009c4:	4b79      	ldr	r3, [pc, #484]	; (8000bac <USART3_IRQHandler+0x4b8>)
 80009c6:	781a      	ldrb	r2, [r3, #0]
 80009c8:	4b79      	ldr	r3, [pc, #484]	; (8000bb0 <USART3_IRQHandler+0x4bc>)
 80009ca:	775a      	strb	r2, [r3, #29]
					gelen_mesaj[gelen_veri_adeti] = gelen_karakter;
 80009cc:	4b79      	ldr	r3, [pc, #484]	; (8000bb4 <USART3_IRQHandler+0x4c0>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a76      	ldr	r2, [pc, #472]	; (8000bac <USART3_IRQHandler+0x4b8>)
 80009d2:	7811      	ldrb	r1, [r2, #0]
 80009d4:	4a78      	ldr	r2, [pc, #480]	; (8000bb8 <USART3_IRQHandler+0x4c4>)
 80009d6:	54d1      	strb	r1, [r2, r3]

					break;
 80009d8:	e018      	b.n	8000a0c <USART3_IRQHandler+0x318>
				case 14:
					gelen_mesaj_yapisi.bitis = gelen_karakter;
 80009da:	4b74      	ldr	r3, [pc, #464]	; (8000bac <USART3_IRQHandler+0x4b8>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	b29a      	uxth	r2, r3
 80009e0:	4b73      	ldr	r3, [pc, #460]	; (8000bb0 <USART3_IRQHandler+0x4bc>)
 80009e2:	83da      	strh	r2, [r3, #30]

					if(gelen_mesaj_yapisi.bitis == yapi.bitis)
 80009e4:	4b72      	ldr	r3, [pc, #456]	; (8000bb0 <USART3_IRQHandler+0x4bc>)
 80009e6:	8bda      	ldrh	r2, [r3, #30]
 80009e8:	4b74      	ldr	r3, [pc, #464]	; (8000bbc <USART3_IRQHandler+0x4c8>)
 80009ea:	8bdb      	ldrh	r3, [r3, #30]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d106      	bne.n	80009fe <USART3_IRQHandler+0x30a>
					{
						gelen_mesaj[gelen_veri_adeti] = gelen_karakter;
 80009f0:	4b70      	ldr	r3, [pc, #448]	; (8000bb4 <USART3_IRQHandler+0x4c0>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a6d      	ldr	r2, [pc, #436]	; (8000bac <USART3_IRQHandler+0x4b8>)
 80009f6:	7811      	ldrb	r1, [r2, #0]
 80009f8:	4a6f      	ldr	r2, [pc, #444]	; (8000bb8 <USART3_IRQHandler+0x4c4>)
 80009fa:	54d1      	strb	r1, [r2, r3]
					}
					else
					{
						olumsuz_durum++;
					}
					break;
 80009fc:	e005      	b.n	8000a0a <USART3_IRQHandler+0x316>
						olumsuz_durum++;
 80009fe:	4b6a      	ldr	r3, [pc, #424]	; (8000ba8 <USART3_IRQHandler+0x4b4>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	3301      	adds	r3, #1
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4b68      	ldr	r3, [pc, #416]	; (8000ba8 <USART3_IRQHandler+0x4b4>)
 8000a08:	701a      	strb	r2, [r3, #0]
					break;
 8000a0a:	bf00      	nop
			}
			gelen_veri_adeti++;
 8000a0c:	4b69      	ldr	r3, [pc, #420]	; (8000bb4 <USART3_IRQHandler+0x4c0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4a68      	ldr	r2, [pc, #416]	; (8000bb4 <USART3_IRQHandler+0x4c0>)
 8000a14:	6013      	str	r3, [r2, #0]
			}
			gelen_veri_adeti = 0;
			olumsuz_durum = 0;
		}
	}
}
 8000a16:	e0c5      	b.n	8000ba4 <USART3_IRQHandler+0x4b0>
			if(gelen_veri_adeti == 15  && olumsuz_durum == 0)
 8000a18:	4b66      	ldr	r3, [pc, #408]	; (8000bb4 <USART3_IRQHandler+0x4c0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	f040 80b1 	bne.w	8000b84 <USART3_IRQHandler+0x490>
 8000a22:	4b61      	ldr	r3, [pc, #388]	; (8000ba8 <USART3_IRQHandler+0x4b4>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f040 80ac 	bne.w	8000b84 <USART3_IRQHandler+0x490>
				  hatasiz_mesaj++;
 8000a2c:	4b64      	ldr	r3, [pc, #400]	; (8000bc0 <USART3_IRQHandler+0x4cc>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	3301      	adds	r3, #1
 8000a32:	4a63      	ldr	r2, [pc, #396]	; (8000bc0 <USART3_IRQHandler+0x4cc>)
 8000a34:	6013      	str	r3, [r2, #0]
				  gelen_mesaj[16] = '\n';
 8000a36:	4b60      	ldr	r3, [pc, #384]	; (8000bb8 <USART3_IRQHandler+0x4c4>)
 8000a38:	220a      	movs	r2, #10
 8000a3a:	741a      	strb	r2, [r3, #16]
			      binler = gelen_mesaj[10] - '0';
 8000a3c:	4b5e      	ldr	r3, [pc, #376]	; (8000bb8 <USART3_IRQHandler+0x4c4>)
 8000a3e:	7a9b      	ldrb	r3, [r3, #10]
 8000a40:	3b30      	subs	r3, #48	; 0x30
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	4b5f      	ldr	r3, [pc, #380]	; (8000bc4 <USART3_IRQHandler+0x4d0>)
 8000a46:	701a      	strb	r2, [r3, #0]
				  yuzler = gelen_mesaj[11] - '0';
 8000a48:	4b5b      	ldr	r3, [pc, #364]	; (8000bb8 <USART3_IRQHandler+0x4c4>)
 8000a4a:	7adb      	ldrb	r3, [r3, #11]
 8000a4c:	3b30      	subs	r3, #48	; 0x30
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	4b5d      	ldr	r3, [pc, #372]	; (8000bc8 <USART3_IRQHandler+0x4d4>)
 8000a52:	701a      	strb	r2, [r3, #0]
				  onlar  = gelen_mesaj[12] - '0';
 8000a54:	4b58      	ldr	r3, [pc, #352]	; (8000bb8 <USART3_IRQHandler+0x4c4>)
 8000a56:	7b1b      	ldrb	r3, [r3, #12]
 8000a58:	3b30      	subs	r3, #48	; 0x30
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	4b5b      	ldr	r3, [pc, #364]	; (8000bcc <USART3_IRQHandler+0x4d8>)
 8000a5e:	701a      	strb	r2, [r3, #0]
				  birler = gelen_mesaj[13] - '0';
 8000a60:	4b55      	ldr	r3, [pc, #340]	; (8000bb8 <USART3_IRQHandler+0x4c4>)
 8000a62:	7b5b      	ldrb	r3, [r3, #13]
 8000a64:	3b30      	subs	r3, #48	; 0x30
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	4b59      	ldr	r3, [pc, #356]	; (8000bd0 <USART3_IRQHandler+0x4dc>)
 8000a6a:	701a      	strb	r2, [r3, #0]
				  if(okuma_yazma == 1)
 8000a6c:	4b59      	ldr	r3, [pc, #356]	; (8000bd4 <USART3_IRQHandler+0x4e0>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d11f      	bne.n	8000ab4 <USART3_IRQHandler+0x3c0>
					  toplam = binler*1000 + yuzler*100 + onlar*10 + birler;
 8000a74:	4b53      	ldr	r3, [pc, #332]	; (8000bc4 <USART3_IRQHandler+0x4d0>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7e:	fb03 f202 	mul.w	r2, r3, r2
 8000a82:	4b51      	ldr	r3, [pc, #324]	; (8000bc8 <USART3_IRQHandler+0x4d4>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	4619      	mov	r1, r3
 8000a88:	2364      	movs	r3, #100	; 0x64
 8000a8a:	fb03 f301 	mul.w	r3, r3, r1
 8000a8e:	441a      	add	r2, r3
 8000a90:	4b4e      	ldr	r3, [pc, #312]	; (8000bcc <USART3_IRQHandler+0x4d8>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4619      	mov	r1, r3
 8000a96:	460b      	mov	r3, r1
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a4b      	ldr	r2, [pc, #300]	; (8000bd0 <USART3_IRQHandler+0x4dc>)
 8000aa2:	7812      	ldrb	r2, [r2, #0]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a4c      	ldr	r2, [pc, #304]	; (8000bd8 <USART3_IRQHandler+0x4e4>)
 8000aa8:	6013      	str	r3, [r2, #0]
					  TIM1->ARR = toplam; //Gelen değer ARR register'ına yazılıyor.
 8000aaa:	4b4b      	ldr	r3, [pc, #300]	; (8000bd8 <USART3_IRQHandler+0x4e4>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	4b4b      	ldr	r3, [pc, #300]	; (8000bdc <USART3_IRQHandler+0x4e8>)
 8000ab0:	62da      	str	r2, [r3, #44]	; 0x2c
				  if(okuma_yazma == 1)
 8000ab2:	e070      	b.n	8000b96 <USART3_IRQHandler+0x4a2>
				  else if(okuma_yazma == 0)
 8000ab4:	4b47      	ldr	r3, [pc, #284]	; (8000bd4 <USART3_IRQHandler+0x4e0>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d16c      	bne.n	8000b96 <USART3_IRQHandler+0x4a2>
					  sayimin_gonderilcegi_an = TIM1->CNT;
 8000abc:	4b47      	ldr	r3, [pc, #284]	; (8000bdc <USART3_IRQHandler+0x4e8>)
 8000abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac0:	4a47      	ldr	r2, [pc, #284]	; (8000be0 <USART3_IRQHandler+0x4ec>)
 8000ac2:	6013      	str	r3, [r2, #0]
					  birler = sayimin_gonderilcegi_an % 10;
 8000ac4:	4b46      	ldr	r3, [pc, #280]	; (8000be0 <USART3_IRQHandler+0x4ec>)
 8000ac6:	6819      	ldr	r1, [r3, #0]
 8000ac8:	4b46      	ldr	r3, [pc, #280]	; (8000be4 <USART3_IRQHandler+0x4f0>)
 8000aca:	fba3 2301 	umull	r2, r3, r3, r1
 8000ace:	08da      	lsrs	r2, r3, #3
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	1aca      	subs	r2, r1, r3
 8000ada:	b2d2      	uxtb	r2, r2
 8000adc:	4b3c      	ldr	r3, [pc, #240]	; (8000bd0 <USART3_IRQHandler+0x4dc>)
 8000ade:	701a      	strb	r2, [r3, #0]
					  onlar = (sayimin_gonderilcegi_an/ 10) % 10;
 8000ae0:	4b3f      	ldr	r3, [pc, #252]	; (8000be0 <USART3_IRQHandler+0x4ec>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a3f      	ldr	r2, [pc, #252]	; (8000be4 <USART3_IRQHandler+0x4f0>)
 8000ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aea:	08d9      	lsrs	r1, r3, #3
 8000aec:	4b3d      	ldr	r3, [pc, #244]	; (8000be4 <USART3_IRQHandler+0x4f0>)
 8000aee:	fba3 2301 	umull	r2, r3, r3, r1
 8000af2:	08da      	lsrs	r2, r3, #3
 8000af4:	4613      	mov	r3, r2
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	4413      	add	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	1aca      	subs	r2, r1, r3
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	4b32      	ldr	r3, [pc, #200]	; (8000bcc <USART3_IRQHandler+0x4d8>)
 8000b02:	701a      	strb	r2, [r3, #0]
					  yuzler =  (sayimin_gonderilcegi_an/ 100) % 10;
 8000b04:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <USART3_IRQHandler+0x4ec>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a37      	ldr	r2, [pc, #220]	; (8000be8 <USART3_IRQHandler+0x4f4>)
 8000b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0e:	0959      	lsrs	r1, r3, #5
 8000b10:	4b34      	ldr	r3, [pc, #208]	; (8000be4 <USART3_IRQHandler+0x4f0>)
 8000b12:	fba3 2301 	umull	r2, r3, r3, r1
 8000b16:	08da      	lsrs	r2, r3, #3
 8000b18:	4613      	mov	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	1aca      	subs	r2, r1, r3
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <USART3_IRQHandler+0x4d4>)
 8000b26:	701a      	strb	r2, [r3, #0]
					  binler = (sayimin_gonderilcegi_an / 1000) % 10;
 8000b28:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <USART3_IRQHandler+0x4ec>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a2f      	ldr	r2, [pc, #188]	; (8000bec <USART3_IRQHandler+0x4f8>)
 8000b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b32:	0999      	lsrs	r1, r3, #6
 8000b34:	4b2b      	ldr	r3, [pc, #172]	; (8000be4 <USART3_IRQHandler+0x4f0>)
 8000b36:	fba3 2301 	umull	r2, r3, r3, r1
 8000b3a:	08da      	lsrs	r2, r3, #3
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	1aca      	subs	r2, r1, r3
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <USART3_IRQHandler+0x4d0>)
 8000b4a:	701a      	strb	r2, [r3, #0]
					  gelen_mesaj[13] = birler + '0';
 8000b4c:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <USART3_IRQHandler+0x4dc>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	3330      	adds	r3, #48	; 0x30
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <USART3_IRQHandler+0x4c4>)
 8000b56:	735a      	strb	r2, [r3, #13]
					  gelen_mesaj[12] = onlar  + '0';
 8000b58:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <USART3_IRQHandler+0x4d8>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	3330      	adds	r3, #48	; 0x30
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <USART3_IRQHandler+0x4c4>)
 8000b62:	731a      	strb	r2, [r3, #12]
					  gelen_mesaj[11] = yuzler + '0';
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <USART3_IRQHandler+0x4d4>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	3330      	adds	r3, #48	; 0x30
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <USART3_IRQHandler+0x4c4>)
 8000b6e:	72da      	strb	r2, [r3, #11]
					  gelen_mesaj[10] = binler + '0';
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <USART3_IRQHandler+0x4d0>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	3330      	adds	r3, #48	; 0x30
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <USART3_IRQHandler+0x4c4>)
 8000b7a:	729a      	strb	r2, [r3, #10]
					  yollanacak_mesaj(gelen_mesaj);  //Dışarıya mesaj gönderiliyor.
 8000b7c:	480e      	ldr	r0, [pc, #56]	; (8000bb8 <USART3_IRQHandler+0x4c4>)
 8000b7e:	f7ff fda1 	bl	80006c4 <yollanacak_mesaj>
				  if(okuma_yazma == 1)
 8000b82:	e008      	b.n	8000b96 <USART3_IRQHandler+0x4a2>
				hatali_mesaj++;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <USART3_IRQHandler+0x4fc>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <USART3_IRQHandler+0x4fc>)
 8000b8c:	6013      	str	r3, [r2, #0]
				yollanacak_mesaj(hata_mesaji);
 8000b8e:	4819      	ldr	r0, [pc, #100]	; (8000bf4 <USART3_IRQHandler+0x500>)
 8000b90:	f7ff fd98 	bl	80006c4 <yollanacak_mesaj>
 8000b94:	e000      	b.n	8000b98 <USART3_IRQHandler+0x4a4>
				  if(okuma_yazma == 1)
 8000b96:	bf00      	nop
			gelen_veri_adeti = 0;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <USART3_IRQHandler+0x4c0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
			olumsuz_durum = 0;
 8000b9e:	4b02      	ldr	r3, [pc, #8]	; (8000ba8 <USART3_IRQHandler+0x4b4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2000007d 	.word	0x2000007d
 8000bac:	2000007e 	.word	0x2000007e
 8000bb0:	200000a0 	.word	0x200000a0
 8000bb4:	20000060 	.word	0x20000060
 8000bb8:	20000050 	.word	0x20000050
 8000bbc:	20000080 	.word	0x20000080
 8000bc0:	20000078 	.word	0x20000078
 8000bc4:	20000064 	.word	0x20000064
 8000bc8:	20000065 	.word	0x20000065
 8000bcc:	20000066 	.word	0x20000066
 8000bd0:	20000067 	.word	0x20000067
 8000bd4:	2000007c 	.word	0x2000007c
 8000bd8:	20000068 	.word	0x20000068
 8000bdc:	40010000 	.word	0x40010000
 8000be0:	2000006c 	.word	0x2000006c
 8000be4:	cccccccd 	.word	0xcccccccd
 8000be8:	51eb851f 	.word	0x51eb851f
 8000bec:	10624dd3 	.word	0x10624dd3
 8000bf0:	20000074 	.word	0x20000074
 8000bf4:	20000000 	.word	0x20000000

08000bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf8:	b5b0      	push	{r4, r5, r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	yapi = yapi_tanimla();
 8000bfe:	4c0f      	ldr	r4, [pc, #60]	; (8000c3c <main+0x44>)
 8000c00:	463b      	mov	r3, r7
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fc7a 	bl	80004fc <yapi_tanimla>
 8000c08:	4625      	mov	r5, r4
 8000c0a:	463c      	mov	r4, r7
 8000c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c14:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	GPIO_Config();
 8000c18:	f7ff fcb2 	bl	8000580 <GPIO_Config>
	TIMER_Config();
 8000c1c:	f7ff fd02 	bl	8000624 <TIMER_Config>
	USART_Config();
 8000c20:	f7ff fcd2 	bl	80005c8 <USART_Config>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c24:	f000 f944 	bl	8000eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c28:	f000 f80e 	bl	8000c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2c:	f000 f876 	bl	8000d1c <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sayim_degeri = TIM1->CNT;  // STMStudio ortamında gözlemlemek için sayac degeri değişkende tutuluyor.
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <main+0x48>)
 8000c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <main+0x4c>)
 8000c38:	801a      	strh	r2, [r3, #0]
 8000c3a:	e7f9      	b.n	8000c30 <main+0x38>
 8000c3c:	20000080 	.word	0x20000080
 8000c40:	40010000 	.word	0x40010000
 8000c44:	20000070 	.word	0x20000070

08000c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b094      	sub	sp, #80	; 0x50
 8000c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4e:	f107 0320 	add.w	r3, r7, #32
 8000c52:	2230      	movs	r2, #48	; 0x30
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 fee6 	bl	8001a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	4b28      	ldr	r3, [pc, #160]	; (8000d14 <SystemClock_Config+0xcc>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	4a27      	ldr	r2, [pc, #156]	; (8000d14 <SystemClock_Config+0xcc>)
 8000c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7c:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <SystemClock_Config+0xcc>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <SystemClock_Config+0xd0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a21      	ldr	r2, [pc, #132]	; (8000d18 <SystemClock_Config+0xd0>)
 8000c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <SystemClock_Config+0xd0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cbc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cc0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cc6:	2307      	movs	r3, #7
 8000cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cca:	f107 0320 	add.w	r3, r7, #32
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 fa46 	bl	8001160 <HAL_RCC_OscConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cda:	f000 f855 	bl	8000d88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cde:	230f      	movs	r3, #15
 8000ce0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	2105      	movs	r1, #5
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 fca7 	bl	8001650 <HAL_RCC_ClockConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d08:	f000 f83e 	bl	8000d88 <Error_Handler>
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	3750      	adds	r7, #80	; 0x50
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40007000 	.word	0x40007000

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_GPIO_Init+0x68>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a16      	ldr	r2, [pc, #88]	; (8000d84 <MX_GPIO_Init+0x68>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_GPIO_Init+0x68>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <MX_GPIO_Init+0x68>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <MX_GPIO_Init+0x68>)
 8000d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <MX_GPIO_Init+0x68>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_GPIO_Init+0x68>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <MX_GPIO_Init+0x68>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_GPIO_Init+0x68>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]

}
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
}
 8000d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <Error_Handler+0x8>
	...

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <HAL_MspInit+0x4c>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dd2:	2007      	movs	r0, #7
 8000dd4:	f000 f990 	bl	80010f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40023800 	.word	0x40023800

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <NMI_Handler+0x4>

08000dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <MemManage_Handler+0x4>

08000df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e30:	f000 f890 	bl	8000f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e62:	490e      	ldr	r1, [pc, #56]	; (8000e9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e64:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e78:	4c0b      	ldr	r4, [pc, #44]	; (8000ea8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e86:	f7ff ffd7 	bl	8000e38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f000 fda9 	bl	80019e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8e:	f7ff feb3 	bl	8000bf8 <main>
  bx  lr    
 8000e92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000ea0:	08001a70 	.word	0x08001a70
  ldr r2, =_sbss
 8000ea4:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000ea8:	200000e4 	.word	0x200000e4

08000eac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC_IRQHandler>
	...

08000eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <HAL_Init+0x40>)
 8000eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <HAL_Init+0x40>)
 8000ec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <HAL_Init+0x40>)
 8000ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f000 f90d 	bl	80010f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f000 f808 	bl	8000ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee4:	f7ff ff56 	bl	8000d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023c00 	.word	0x40023c00

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x54>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_InitTick+0x58>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f917 	bl	8001146 <HAL_SYSTICK_Config>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00e      	b.n	8000f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b0f      	cmp	r3, #15
 8000f26:	d80a      	bhi.n	8000f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f000 f8ed 	bl	800110e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <HAL_InitTick+0x5c>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e000      	b.n	8000f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000028 	.word	0x20000028
 8000f4c:	20000030 	.word	0x20000030
 8000f50:	2000002c 	.word	0x2000002c

08000f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x20>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_IncTick+0x24>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <HAL_IncTick+0x24>)
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000030 	.word	0x20000030
 8000f78:	200000e0 	.word	0x200000e0

08000f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <HAL_GetTick+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	200000e0 	.word	0x200000e0

08000f94 <__NVIC_SetPriorityGrouping>:
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc6:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	60d3      	str	r3, [r2, #12]
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_GetPriorityGrouping>:
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	f003 0307 	and.w	r3, r3, #7
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db0a      	blt.n	8001022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	490c      	ldr	r1, [pc, #48]	; (8001044 <__NVIC_SetPriority+0x4c>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	440b      	add	r3, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001020:	e00a      	b.n	8001038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4908      	ldr	r1, [pc, #32]	; (8001048 <__NVIC_SetPriority+0x50>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3b04      	subs	r3, #4
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	440b      	add	r3, r1
 8001036:	761a      	strb	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2b04      	cmp	r3, #4
 8001068:	bf28      	it	cs
 800106a:	2304      	movcs	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	2b06      	cmp	r3, #6
 8001074:	d902      	bls.n	800107c <NVIC_EncodePriority+0x30>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b03      	subs	r3, #3
 800107a:	e000      	b.n	800107e <NVIC_EncodePriority+0x32>
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	f04f 32ff 	mov.w	r2, #4294967295
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001094:	f04f 31ff 	mov.w	r1, #4294967295
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43d9      	mvns	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	4313      	orrs	r3, r2
         );
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	; 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c4:	d301      	bcc.n	80010ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00f      	b.n	80010ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <SysTick_Config+0x40>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d2:	210f      	movs	r1, #15
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f7ff ff8e 	bl	8000ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <SysTick_Config+0x40>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e2:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <SysTick_Config+0x40>)
 80010e4:	2207      	movs	r2, #7
 80010e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	e000e010 	.word	0xe000e010

080010f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff47 	bl	8000f94 <__NVIC_SetPriorityGrouping>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001120:	f7ff ff5c 	bl	8000fdc <__NVIC_GetPriorityGrouping>
 8001124:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	68b9      	ldr	r1, [r7, #8]
 800112a:	6978      	ldr	r0, [r7, #20]
 800112c:	f7ff ff8e 	bl	800104c <NVIC_EncodePriority>
 8001130:	4602      	mov	r2, r0
 8001132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff5d 	bl	8000ff8 <__NVIC_SetPriority>
}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffb0 	bl	80010b4 <SysTick_Config>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e264      	b.n	800163c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d075      	beq.n	800126a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800117e:	4ba3      	ldr	r3, [pc, #652]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b04      	cmp	r3, #4
 8001188:	d00c      	beq.n	80011a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800118a:	4ba0      	ldr	r3, [pc, #640]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001192:	2b08      	cmp	r3, #8
 8001194:	d112      	bne.n	80011bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001196:	4b9d      	ldr	r3, [pc, #628]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800119e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011a2:	d10b      	bne.n	80011bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a4:	4b99      	ldr	r3, [pc, #612]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d05b      	beq.n	8001268 <HAL_RCC_OscConfig+0x108>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d157      	bne.n	8001268 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e23f      	b.n	800163c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c4:	d106      	bne.n	80011d4 <HAL_RCC_OscConfig+0x74>
 80011c6:	4b91      	ldr	r3, [pc, #580]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a90      	ldr	r2, [pc, #576]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	e01d      	b.n	8001210 <HAL_RCC_OscConfig+0xb0>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011dc:	d10c      	bne.n	80011f8 <HAL_RCC_OscConfig+0x98>
 80011de:	4b8b      	ldr	r3, [pc, #556]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a8a      	ldr	r2, [pc, #552]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	4b88      	ldr	r3, [pc, #544]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a87      	ldr	r2, [pc, #540]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e00b      	b.n	8001210 <HAL_RCC_OscConfig+0xb0>
 80011f8:	4b84      	ldr	r3, [pc, #528]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a83      	ldr	r2, [pc, #524]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	4b81      	ldr	r3, [pc, #516]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a80      	ldr	r2, [pc, #512]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 800120a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800120e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d013      	beq.n	8001240 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001218:	f7ff feb0 	bl	8000f7c <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001220:	f7ff feac 	bl	8000f7c <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b64      	cmp	r3, #100	; 0x64
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e204      	b.n	800163c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001232:	4b76      	ldr	r3, [pc, #472]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0f0      	beq.n	8001220 <HAL_RCC_OscConfig+0xc0>
 800123e:	e014      	b.n	800126a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001240:	f7ff fe9c 	bl	8000f7c <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001248:	f7ff fe98 	bl	8000f7c <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b64      	cmp	r3, #100	; 0x64
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e1f0      	b.n	800163c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125a:	4b6c      	ldr	r3, [pc, #432]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0xe8>
 8001266:	e000      	b.n	800126a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d063      	beq.n	800133e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001276:	4b65      	ldr	r3, [pc, #404]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 030c 	and.w	r3, r3, #12
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00b      	beq.n	800129a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001282:	4b62      	ldr	r3, [pc, #392]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800128a:	2b08      	cmp	r3, #8
 800128c:	d11c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800128e:	4b5f      	ldr	r3, [pc, #380]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d116      	bne.n	80012c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800129a:	4b5c      	ldr	r3, [pc, #368]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d005      	beq.n	80012b2 <HAL_RCC_OscConfig+0x152>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d001      	beq.n	80012b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e1c4      	b.n	800163c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b2:	4b56      	ldr	r3, [pc, #344]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	4952      	ldr	r1, [pc, #328]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c6:	e03a      	b.n	800133e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d020      	beq.n	8001312 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012d0:	4b4f      	ldr	r3, [pc, #316]	; (8001410 <HAL_RCC_OscConfig+0x2b0>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d6:	f7ff fe51 	bl	8000f7c <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012de:	f7ff fe4d 	bl	8000f7c <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e1a5      	b.n	800163c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f0:	4b46      	ldr	r3, [pc, #280]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f0      	beq.n	80012de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fc:	4b43      	ldr	r3, [pc, #268]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	4940      	ldr	r1, [pc, #256]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 800130c:	4313      	orrs	r3, r2
 800130e:	600b      	str	r3, [r1, #0]
 8001310:	e015      	b.n	800133e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001312:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <HAL_RCC_OscConfig+0x2b0>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001318:	f7ff fe30 	bl	8000f7c <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001320:	f7ff fe2c 	bl	8000f7c <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e184      	b.n	800163c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001332:	4b36      	ldr	r3, [pc, #216]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	2b00      	cmp	r3, #0
 8001348:	d030      	beq.n	80013ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d016      	beq.n	8001380 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001352:	4b30      	ldr	r3, [pc, #192]	; (8001414 <HAL_RCC_OscConfig+0x2b4>)
 8001354:	2201      	movs	r2, #1
 8001356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001358:	f7ff fe10 	bl	8000f7c <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001360:	f7ff fe0c 	bl	8000f7c <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e164      	b.n	800163c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001372:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0x200>
 800137e:	e015      	b.n	80013ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <HAL_RCC_OscConfig+0x2b4>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001386:	f7ff fdf9 	bl	8000f7c <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800138e:	f7ff fdf5 	bl	8000f7c <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e14d      	b.n	800163c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80013a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f0      	bne.n	800138e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 80a0 	beq.w	80014fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10f      	bne.n	80013ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a0e      	ldr	r2, [pc, #56]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013e6:	2301      	movs	r3, #1
 80013e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_RCC_OscConfig+0x2b8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d121      	bne.n	800143a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_RCC_OscConfig+0x2b8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a07      	ldr	r2, [pc, #28]	; (8001418 <HAL_RCC_OscConfig+0x2b8>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001402:	f7ff fdbb 	bl	8000f7c <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001408:	e011      	b.n	800142e <HAL_RCC_OscConfig+0x2ce>
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	42470000 	.word	0x42470000
 8001414:	42470e80 	.word	0x42470e80
 8001418:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141c:	f7ff fdae 	bl	8000f7c <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e106      	b.n	800163c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142e:	4b85      	ldr	r3, [pc, #532]	; (8001644 <HAL_RCC_OscConfig+0x4e4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d106      	bne.n	8001450 <HAL_RCC_OscConfig+0x2f0>
 8001442:	4b81      	ldr	r3, [pc, #516]	; (8001648 <HAL_RCC_OscConfig+0x4e8>)
 8001444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001446:	4a80      	ldr	r2, [pc, #512]	; (8001648 <HAL_RCC_OscConfig+0x4e8>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6713      	str	r3, [r2, #112]	; 0x70
 800144e:	e01c      	b.n	800148a <HAL_RCC_OscConfig+0x32a>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2b05      	cmp	r3, #5
 8001456:	d10c      	bne.n	8001472 <HAL_RCC_OscConfig+0x312>
 8001458:	4b7b      	ldr	r3, [pc, #492]	; (8001648 <HAL_RCC_OscConfig+0x4e8>)
 800145a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145c:	4a7a      	ldr	r2, [pc, #488]	; (8001648 <HAL_RCC_OscConfig+0x4e8>)
 800145e:	f043 0304 	orr.w	r3, r3, #4
 8001462:	6713      	str	r3, [r2, #112]	; 0x70
 8001464:	4b78      	ldr	r3, [pc, #480]	; (8001648 <HAL_RCC_OscConfig+0x4e8>)
 8001466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001468:	4a77      	ldr	r2, [pc, #476]	; (8001648 <HAL_RCC_OscConfig+0x4e8>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6713      	str	r3, [r2, #112]	; 0x70
 8001470:	e00b      	b.n	800148a <HAL_RCC_OscConfig+0x32a>
 8001472:	4b75      	ldr	r3, [pc, #468]	; (8001648 <HAL_RCC_OscConfig+0x4e8>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001476:	4a74      	ldr	r2, [pc, #464]	; (8001648 <HAL_RCC_OscConfig+0x4e8>)
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	6713      	str	r3, [r2, #112]	; 0x70
 800147e:	4b72      	ldr	r3, [pc, #456]	; (8001648 <HAL_RCC_OscConfig+0x4e8>)
 8001480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001482:	4a71      	ldr	r2, [pc, #452]	; (8001648 <HAL_RCC_OscConfig+0x4e8>)
 8001484:	f023 0304 	bic.w	r3, r3, #4
 8001488:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d015      	beq.n	80014be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001492:	f7ff fd73 	bl	8000f7c <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001498:	e00a      	b.n	80014b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800149a:	f7ff fd6f 	bl	8000f7c <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e0c5      	b.n	800163c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b0:	4b65      	ldr	r3, [pc, #404]	; (8001648 <HAL_RCC_OscConfig+0x4e8>)
 80014b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0ee      	beq.n	800149a <HAL_RCC_OscConfig+0x33a>
 80014bc:	e014      	b.n	80014e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014be:	f7ff fd5d 	bl	8000f7c <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c4:	e00a      	b.n	80014dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c6:	f7ff fd59 	bl	8000f7c <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e0af      	b.n	800163c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014dc:	4b5a      	ldr	r3, [pc, #360]	; (8001648 <HAL_RCC_OscConfig+0x4e8>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1ee      	bne.n	80014c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014e8:	7dfb      	ldrb	r3, [r7, #23]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d105      	bne.n	80014fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ee:	4b56      	ldr	r3, [pc, #344]	; (8001648 <HAL_RCC_OscConfig+0x4e8>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a55      	ldr	r2, [pc, #340]	; (8001648 <HAL_RCC_OscConfig+0x4e8>)
 80014f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 809b 	beq.w	800163a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001504:	4b50      	ldr	r3, [pc, #320]	; (8001648 <HAL_RCC_OscConfig+0x4e8>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 030c 	and.w	r3, r3, #12
 800150c:	2b08      	cmp	r3, #8
 800150e:	d05c      	beq.n	80015ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d141      	bne.n	800159c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001518:	4b4c      	ldr	r3, [pc, #304]	; (800164c <HAL_RCC_OscConfig+0x4ec>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151e:	f7ff fd2d 	bl	8000f7c <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001526:	f7ff fd29 	bl	8000f7c <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e081      	b.n	800163c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001538:	4b43      	ldr	r3, [pc, #268]	; (8001648 <HAL_RCC_OscConfig+0x4e8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1f0      	bne.n	8001526 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69da      	ldr	r2, [r3, #28]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	019b      	lsls	r3, r3, #6
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	085b      	lsrs	r3, r3, #1
 800155c:	3b01      	subs	r3, #1
 800155e:	041b      	lsls	r3, r3, #16
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001566:	061b      	lsls	r3, r3, #24
 8001568:	4937      	ldr	r1, [pc, #220]	; (8001648 <HAL_RCC_OscConfig+0x4e8>)
 800156a:	4313      	orrs	r3, r2
 800156c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800156e:	4b37      	ldr	r3, [pc, #220]	; (800164c <HAL_RCC_OscConfig+0x4ec>)
 8001570:	2201      	movs	r2, #1
 8001572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fd02 	bl	8000f7c <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157c:	f7ff fcfe 	bl	8000f7c <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e056      	b.n	800163c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158e:	4b2e      	ldr	r3, [pc, #184]	; (8001648 <HAL_RCC_OscConfig+0x4e8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x41c>
 800159a:	e04e      	b.n	800163a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159c:	4b2b      	ldr	r3, [pc, #172]	; (800164c <HAL_RCC_OscConfig+0x4ec>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a2:	f7ff fceb 	bl	8000f7c <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015aa:	f7ff fce7 	bl	8000f7c <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e03f      	b.n	800163c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015bc:	4b22      	ldr	r3, [pc, #136]	; (8001648 <HAL_RCC_OscConfig+0x4e8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f0      	bne.n	80015aa <HAL_RCC_OscConfig+0x44a>
 80015c8:	e037      	b.n	800163a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e032      	b.n	800163c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_RCC_OscConfig+0x4e8>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d028      	beq.n	8001636 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d121      	bne.n	8001636 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d11a      	bne.n	8001636 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001606:	4013      	ands	r3, r2
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800160c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800160e:	4293      	cmp	r3, r2
 8001610:	d111      	bne.n	8001636 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	085b      	lsrs	r3, r3, #1
 800161e:	3b01      	subs	r3, #1
 8001620:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001622:	429a      	cmp	r2, r3
 8001624:	d107      	bne.n	8001636 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001630:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001632:	429a      	cmp	r2, r3
 8001634:	d001      	beq.n	800163a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40007000 	.word	0x40007000
 8001648:	40023800 	.word	0x40023800
 800164c:	42470060 	.word	0x42470060

08001650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0cc      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001664:	4b68      	ldr	r3, [pc, #416]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d90c      	bls.n	800168c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001672:	4b65      	ldr	r3, [pc, #404]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167a:	4b63      	ldr	r3, [pc, #396]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d001      	beq.n	800168c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0b8      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d020      	beq.n	80016da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016a4:	4b59      	ldr	r3, [pc, #356]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	4a58      	ldr	r2, [pc, #352]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016bc:	4b53      	ldr	r3, [pc, #332]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	4a52      	ldr	r2, [pc, #328]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c8:	4b50      	ldr	r3, [pc, #320]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	494d      	ldr	r1, [pc, #308]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d044      	beq.n	8001770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ee:	4b47      	ldr	r3, [pc, #284]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d119      	bne.n	800172e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e07f      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d003      	beq.n	800170e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800170a:	2b03      	cmp	r3, #3
 800170c:	d107      	bne.n	800171e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170e:	4b3f      	ldr	r3, [pc, #252]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d109      	bne.n	800172e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e06f      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171e:	4b3b      	ldr	r3, [pc, #236]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e067      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800172e:	4b37      	ldr	r3, [pc, #220]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f023 0203 	bic.w	r2, r3, #3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	4934      	ldr	r1, [pc, #208]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	4313      	orrs	r3, r2
 800173e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001740:	f7ff fc1c 	bl	8000f7c <HAL_GetTick>
 8001744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001746:	e00a      	b.n	800175e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001748:	f7ff fc18 	bl	8000f7c <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	f241 3288 	movw	r2, #5000	; 0x1388
 8001756:	4293      	cmp	r3, r2
 8001758:	d901      	bls.n	800175e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e04f      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175e:	4b2b      	ldr	r3, [pc, #172]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 020c 	and.w	r2, r3, #12
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	429a      	cmp	r2, r3
 800176e:	d1eb      	bne.n	8001748 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001770:	4b25      	ldr	r3, [pc, #148]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d20c      	bcs.n	8001798 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177e:	4b22      	ldr	r3, [pc, #136]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e032      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d008      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	4916      	ldr	r1, [pc, #88]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d009      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	490e      	ldr	r1, [pc, #56]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017d6:	f000 f821 	bl	800181c <HAL_RCC_GetSysClockFreq>
 80017da:	4602      	mov	r2, r0
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	490a      	ldr	r1, [pc, #40]	; (8001810 <HAL_RCC_ClockConfig+0x1c0>)
 80017e8:	5ccb      	ldrb	r3, [r1, r3]
 80017ea:	fa22 f303 	lsr.w	r3, r2, r3
 80017ee:	4a09      	ldr	r2, [pc, #36]	; (8001814 <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_RCC_ClockConfig+0x1c8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fb7c 	bl	8000ef4 <HAL_InitTick>

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023c00 	.word	0x40023c00
 800180c:	40023800 	.word	0x40023800
 8001810:	08001a50 	.word	0x08001a50
 8001814:	20000028 	.word	0x20000028
 8001818:	2000002c 	.word	0x2000002c

0800181c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800181c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	2300      	movs	r3, #0
 800182e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001834:	4b67      	ldr	r3, [pc, #412]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 030c 	and.w	r3, r3, #12
 800183c:	2b08      	cmp	r3, #8
 800183e:	d00d      	beq.n	800185c <HAL_RCC_GetSysClockFreq+0x40>
 8001840:	2b08      	cmp	r3, #8
 8001842:	f200 80bd 	bhi.w	80019c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <HAL_RCC_GetSysClockFreq+0x34>
 800184a:	2b04      	cmp	r3, #4
 800184c:	d003      	beq.n	8001856 <HAL_RCC_GetSysClockFreq+0x3a>
 800184e:	e0b7      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001850:	4b61      	ldr	r3, [pc, #388]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001852:	60bb      	str	r3, [r7, #8]
       break;
 8001854:	e0b7      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001856:	4b61      	ldr	r3, [pc, #388]	; (80019dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001858:	60bb      	str	r3, [r7, #8]
      break;
 800185a:	e0b4      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800185c:	4b5d      	ldr	r3, [pc, #372]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001864:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001866:	4b5b      	ldr	r3, [pc, #364]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d04d      	beq.n	800190e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001872:	4b58      	ldr	r3, [pc, #352]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	099b      	lsrs	r3, r3, #6
 8001878:	461a      	mov	r2, r3
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001882:	f04f 0100 	mov.w	r1, #0
 8001886:	ea02 0800 	and.w	r8, r2, r0
 800188a:	ea03 0901 	and.w	r9, r3, r1
 800188e:	4640      	mov	r0, r8
 8001890:	4649      	mov	r1, r9
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	014b      	lsls	r3, r1, #5
 800189c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018a0:	0142      	lsls	r2, r0, #5
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	ebb0 0008 	subs.w	r0, r0, r8
 80018aa:	eb61 0109 	sbc.w	r1, r1, r9
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	018b      	lsls	r3, r1, #6
 80018b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018bc:	0182      	lsls	r2, r0, #6
 80018be:	1a12      	subs	r2, r2, r0
 80018c0:	eb63 0301 	sbc.w	r3, r3, r1
 80018c4:	f04f 0000 	mov.w	r0, #0
 80018c8:	f04f 0100 	mov.w	r1, #0
 80018cc:	00d9      	lsls	r1, r3, #3
 80018ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018d2:	00d0      	lsls	r0, r2, #3
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	eb12 0208 	adds.w	r2, r2, r8
 80018dc:	eb43 0309 	adc.w	r3, r3, r9
 80018e0:	f04f 0000 	mov.w	r0, #0
 80018e4:	f04f 0100 	mov.w	r1, #0
 80018e8:	0259      	lsls	r1, r3, #9
 80018ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80018ee:	0250      	lsls	r0, r2, #9
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	f7fe fc62 	bl	80001c8 <__aeabi_uldivmod>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4613      	mov	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	e04a      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800190e:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	099b      	lsrs	r3, r3, #6
 8001914:	461a      	mov	r2, r3
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800191e:	f04f 0100 	mov.w	r1, #0
 8001922:	ea02 0400 	and.w	r4, r2, r0
 8001926:	ea03 0501 	and.w	r5, r3, r1
 800192a:	4620      	mov	r0, r4
 800192c:	4629      	mov	r1, r5
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	014b      	lsls	r3, r1, #5
 8001938:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800193c:	0142      	lsls	r2, r0, #5
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	1b00      	subs	r0, r0, r4
 8001944:	eb61 0105 	sbc.w	r1, r1, r5
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	018b      	lsls	r3, r1, #6
 8001952:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001956:	0182      	lsls	r2, r0, #6
 8001958:	1a12      	subs	r2, r2, r0
 800195a:	eb63 0301 	sbc.w	r3, r3, r1
 800195e:	f04f 0000 	mov.w	r0, #0
 8001962:	f04f 0100 	mov.w	r1, #0
 8001966:	00d9      	lsls	r1, r3, #3
 8001968:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800196c:	00d0      	lsls	r0, r2, #3
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	1912      	adds	r2, r2, r4
 8001974:	eb45 0303 	adc.w	r3, r5, r3
 8001978:	f04f 0000 	mov.w	r0, #0
 800197c:	f04f 0100 	mov.w	r1, #0
 8001980:	0299      	lsls	r1, r3, #10
 8001982:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001986:	0290      	lsls	r0, r2, #10
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	461a      	mov	r2, r3
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	f7fe fc16 	bl	80001c8 <__aeabi_uldivmod>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4613      	mov	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	0c1b      	lsrs	r3, r3, #16
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	3301      	adds	r3, #1
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019bc:	60bb      	str	r3, [r7, #8]
      break;
 80019be:	e002      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80019c2:	60bb      	str	r3, [r7, #8]
      break;
 80019c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019c6:	68bb      	ldr	r3, [r7, #8]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	00f42400 	.word	0x00f42400
 80019dc:	007a1200 	.word	0x007a1200

080019e0 <__libc_init_array>:
 80019e0:	b570      	push	{r4, r5, r6, lr}
 80019e2:	4d0d      	ldr	r5, [pc, #52]	; (8001a18 <__libc_init_array+0x38>)
 80019e4:	4c0d      	ldr	r4, [pc, #52]	; (8001a1c <__libc_init_array+0x3c>)
 80019e6:	1b64      	subs	r4, r4, r5
 80019e8:	10a4      	asrs	r4, r4, #2
 80019ea:	2600      	movs	r6, #0
 80019ec:	42a6      	cmp	r6, r4
 80019ee:	d109      	bne.n	8001a04 <__libc_init_array+0x24>
 80019f0:	4d0b      	ldr	r5, [pc, #44]	; (8001a20 <__libc_init_array+0x40>)
 80019f2:	4c0c      	ldr	r4, [pc, #48]	; (8001a24 <__libc_init_array+0x44>)
 80019f4:	f000 f820 	bl	8001a38 <_init>
 80019f8:	1b64      	subs	r4, r4, r5
 80019fa:	10a4      	asrs	r4, r4, #2
 80019fc:	2600      	movs	r6, #0
 80019fe:	42a6      	cmp	r6, r4
 8001a00:	d105      	bne.n	8001a0e <__libc_init_array+0x2e>
 8001a02:	bd70      	pop	{r4, r5, r6, pc}
 8001a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a08:	4798      	blx	r3
 8001a0a:	3601      	adds	r6, #1
 8001a0c:	e7ee      	b.n	80019ec <__libc_init_array+0xc>
 8001a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a12:	4798      	blx	r3
 8001a14:	3601      	adds	r6, #1
 8001a16:	e7f2      	b.n	80019fe <__libc_init_array+0x1e>
 8001a18:	08001a68 	.word	0x08001a68
 8001a1c:	08001a68 	.word	0x08001a68
 8001a20:	08001a68 	.word	0x08001a68
 8001a24:	08001a6c 	.word	0x08001a6c

08001a28 <memset>:
 8001a28:	4402      	add	r2, r0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d100      	bne.n	8001a32 <memset+0xa>
 8001a30:	4770      	bx	lr
 8001a32:	f803 1b01 	strb.w	r1, [r3], #1
 8001a36:	e7f9      	b.n	8001a2c <memset+0x4>

08001a38 <_init>:
 8001a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a3a:	bf00      	nop
 8001a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a3e:	bc08      	pop	{r3}
 8001a40:	469e      	mov	lr, r3
 8001a42:	4770      	bx	lr

08001a44 <_fini>:
 8001a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a46:	bf00      	nop
 8001a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a4a:	bc08      	pop	{r3}
 8001a4c:	469e      	mov	lr, r3
 8001a4e:	4770      	bx	lr
